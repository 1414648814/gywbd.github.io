<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Gong Yong]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://gywbd.github.com/"/>
  <updated>2014-07-29T07:36:21.609Z</updated>
  <id>http://gywbd.github.com/</id>
  
  <author>
    <name><![CDATA[homer]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[exports的用法：Node.js模块的接口设计模式]]></title>
    <link href="http://gywbd.github.com/2014/07/23/shi-yong-exports-nodejs-interface-design-pattern/"/>
    <id>http://gywbd.github.com/2014/07/23/shi-yong-exports-nodejs-interface-design-pattern/</id>
    <published>2014-07-22T22:24:29.000Z</published>
    <updated>2014-07-29T07:15:58.000Z</updated>
    <content type="html"><![CDATA[<p>当我刚开始接触node的时候，我很困惑于为什么一个模块中即可以用<code>exports</code>，也可以用<code>module.exports</code>暴露接口，另外javascript的灵活性也导致暴露接口的写法多种多样，假设我们要定义一个输出<code>“hello world”</code>的模块，下面有两种写法来定义这个模块：</p>
<figure class="highlight [javascript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//写法1</span></div><div class="line">exports.hello = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span></div><div class="line">	console.log(‘world’);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//写法2</span></div><div class="line"><span class="keyword">var</span> f = {</div><div class="line">	hello : <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span></div><div class="line">		console.log(‘world’);</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line">module.exports = f;</div></pre></td></tr></table></figure>

<p>假设我们写的这个模块的文件名为<code>hello.js</code>，执行下面的代码<br><a id="more"></a></p>
<figure class="highlight [javascript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> h = <span class="built_in">require</span>(‘hello’);</div><div class="line">h.hello();</div></pre></td></tr></table></figure>

<p>对于上面的两种写法，执行这段代码后得出的结果是一样的。</p>
<p>理论上这两种写法没有什么区别。如果一个接口只是提供者一个函数，那么这两种写法在实质上也没有什么区别，这就是javascript灵活之所在。不过既然有这么多不同的写法，我们就不免要问在什么情况下这些不同的写法会有不同的含义？或者我们用一种更高大上的语言来描述，对于通过<code>exports</code>或者<code>module.exports</code>来暴露的接口，我们要怎么设计这些接口才是最合适的呢，这也就是这篇文章所要谈论的主题。根据个人经验，我提炼了7种模式：</p>
<ul>
<li>exports命名空间</li>
<li>exports一个工厂方法</li>
<li>exports一个偏函数</li>
<li>exports构造函数</li>
<li>exports单例</li>
<li>扩展全局对象</li>
<li>实现Monkey Patch</li>
</ul>
<h2 id="require、exports和module-exports">require、exports和module.exports</h2>
<p>在开始介绍上面7种模式之前，有必要先介绍点基础知识。</p>
<p>我们都知道在node的代码中使用<code>require</code>加载模块，在模块中使用<code>exports</code>或者<code>module.exports</code>导出接口，<code>require</code>、<code>module</code>、<code>exports</code>都是node的全局对象，我们不需要在模块中定义它们就可以直接使用，不过实际它们都不是全局的，而是模块对象，node的文档中有说明，此外还有<code>__dirname</code>和<code>__filename</code>这两个变量也是模块对象，它们的具体作用请参见文档。所谓模块对象就是它们的作用域仅限于当前模块，这就引出了一个问题，既然作用域仅限于当前模块，那又为什么可以直接使用呢？为了回答这个问题，我们先看一个模块的代码，我们编写了一个<code>bar.js</code>的文件，这是一个node模块，然后再<code>use-bar.js</code>中使用这个模块：</p>
<figure class="highlight [javascript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>bar.js</div><div class="line"><span class="reserved">var</span> bar = <span class="reserved">function</span>(){</div><div class="line">	<span class="built_in">console</span>.log(‘it <span class="keyword">is</span> bar’);</div><div class="line">};</div><div class="line"></div><div class="line"><span class="built_in">exports</span> = bar;</div><div class="line"></div><div class="line"><span class="regexp">//</span>use-bar.js</div><div class="line"><span class="reserved">var</span> bar = <span class="built_in">require</span>(‘./bar.js’);</div><div class="line">bar();  <span class="regexp">//</span>这个会报错：<span class="attribute">TypeError</span>: object <span class="keyword">is</span> <span class="keyword">not</span> a <span class="reserved">function</span></div></pre></td></tr></table></figure>

<p>执行上面的<code>use-bar.js</code>会抛出类型错误的错误，这个错误提示对象不是一个函数，但在<code>bar.js</code>中很明显是将exports赋值给了一个函数啊？ok，我们改一下<code>bar.js</code>，改成下面的样子</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bar.js</span></div><div class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span></div><div class="line">	console.log(‘it <span class="keyword">is</span> bar’);</div><div class="line">};</div><div class="line"></div><div class="line">module.exports = bar;</div></pre></td></tr></table></figure>

<p>然后再执行<code>use-bar.js</code>，这个时候会正常执行并输出<code>it is bar</code>。why？</p>
<p>对于这个问题我们先要了解下node是怎么编译javascript模块的（node还可以用c++写模块，这就是另外一个话题了），上面说了<code>require</code>，<code>exports</code>和<code>module</code>都是模块对象，但之所以可以在模块中不先声明就可以直接使用，是因为node在编译js模块的时候，将我们所写的代码进行了包装，将整个代码放进了一个函数中，具体是这个样子：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="reserved">function</span>(<span class="built_in">exports</span>,<span class="built_in">require</span>,<span class="built_in">module</span>,__filename,__dirname){</div><div class="line">	<span class="reserved">var</span> bar = <span class="reserved">function</span>(){</div><div class="line">		<span class="built_in">console</span>.log(‘it <span class="keyword">is</span> bar’);</div><div class="line">	}</div><div class="line">	<span class="built_in">module</span>.<span class="built_in">exports</span> = bar;</div><div class="line">});</div></pre></td></tr></table></figure>

<p>然后在调用模块的时候会传入这些变量，这样我们在编写模块的时候就可以直接使用这些变量（这里我们又看到了<code>__filename</code>和<code>__dirname</code>），那为什么使用<code>exports=bar</code>会报错，而使用<code>module.exports=bar</code>又是正确的呢？这是因为<code>exports</code>本身就只是<code>module.exports</code>的引用，而使用<code>require</code>加载模块的时候返回的是<code>module.exports</code>，<code>exports=bar</code>改变了<code>exports</code>的引用，所以最终返回的<code>module.exports</code>只是一个空对象，所以会报<code>TypeError</code>的错误。</p>
<p><code>require</code>还有一个重要的行为就是缓存加载的模块，我们在上面的<code>globals</code>的文档中可以看到一个<code>require.cache</code>的对象，这个就是用于缓存加载的模块的对象，node是根据模块的绝对路径进行模块加载的，我们在REPL上看看：</p>
<pre>
$ node
> f1 = require(‘/Users/lscm/node/test/function’);
[Function]
> f2 = require(‘./function’);
[Function]
> f1 === f2
true
> f1() === f2()
false
</pre>


<p>我们可以看到<code>require</code>返回的实例是一样的，但如果调用<code>f1()</code>和<code>f2()</code>返回的也是对象的话（如果返回的不是对象，例如是字符串或者<code>int</code>型的值，<code>f1()===f2()</code>还是会返回<code>true</code>），它们返回的值不一样，这是因为第二次调用<code>require</code>返回的对象是第一次调用<code>require</code>返回的同一个对象，第一次调用的时候将它缓存起来了。</p>
<p>我们可以在node提供的<a href="http://nodejs.org/api/modules.html" target="_blank" rel="external">文档</a>中了解到更多细节，在此就不在深究了，下面我们开始接口设计模式的旅程吧。</p>
<h2 id="exports命名空间">exports命名空间</h2>
<p>node中没有命名空间的概念，模块和包就是组织代码的唯一方式，另外根据我们上面介绍的node编译javascript模块的方式，它本身就会将模块中不用暴露出来的变量限制在当前模块的作用域中，这就实现了避免变量污染的作用，但通过<code>exports</code>我们可以实现类似命名空间的东西。我们先看下node的文件系统核心模块，下面这段代码使用了文件系统模块。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> fs <span class="subst">=</span> <span class="keyword">require</span>(‘fs’),</div><div class="line">	readFile <span class="subst">=</span> fs<span class="built_in">.</span>readFile,</div><div class="line">	ReadStream <span class="subst">=</span> fs<span class="built_in">.</span>ReadStream<span class="built_in">.</span></div><div class="line"></div><div class="line">readFile(‘<span class="built_in">.</span>/file<span class="built_in">.</span>txt’,function(err,<span class="built_in">data</span>){</div><div class="line">	console<span class="built_in">.</span><span class="keyword">log</span>(‘readFile contents: <span class="subst">%</span>s’,<span class="built_in">data</span>);</div><div class="line">});</div><div class="line"></div><div class="line"><span class="literal">new</span> ReadStream(‘<span class="built_in">.</span>/file<span class="built_in">.</span>txt’)<span class="built_in">.</span><span class="keyword">on</span>(‘<span class="built_in">data</span>’,function(<span class="built_in">data</span>){</div><div class="line">	console<span class="built_in">.</span><span class="keyword">log</span>(‘ReadStream contents: <span class="subst">%</span>s’,<span class="built_in">data</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>这段代码先使用<code>require(‘fs’)</code>加载fs模块，并将其赋值给变量<code>fs</code>，然后将<code>fs</code>模块中的<code>readFile</code>和<code>ReadStream</code>两个变量赋值给<code>readFile</code>和<code>ReadStream</code>两个本地变量，我们可以将<code>fs</code>理解成一个命名空间，而其中的<code>readFile</code>和<code>ReadStream</code>这两个变量则是<code>fs</code>这个命名空间下的变量。我们再看看node的<code>fs</code>核心模块是怎么做的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="reserved">var</span> fs = <span class="built_in">exports</span>;</div></pre></td></tr></table></figure>

<p>它首先将<code>exports</code>的引用赋值给一个本地变量<code>fs</code>，这样<code>fs</code>这个本地变量就跟<code>exports</code>都引用同一个对象，也就是<code>module.exports</code>，所以<code>fs</code>这个对象的所有成员变量和成员函数最终都是<code>module.exports</code>的成员变量和成员函数，这些成员变量和成员函数都会暴露出来，通过<code>require</code>加载这个模块后就可以直接使用。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fs.readFile = <span class="keyword">function</span>(path, options, callback_) {</div><div class="line">  // <span class="keyword">...</span></div><div class="line">};</div></pre></td></tr></table></figure>

<p>这里导出了<code>readFile</code>这个函数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fs.ReadStream = ReadStream;</div><div class="line"></div><div class="line"><span class="keyword">function</span> ReadStream(path, options) {</div><div class="line">  // <span class="keyword">...</span></div><div class="line">}</div><div class="line">ReadStream.prototype.open = <span class="keyword">function</span>() {</div><div class="line">  // <span class="keyword">...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>ReadStream</code>是一个构造函数，也是通过赋值给<code>fs</code>导出。</p>
<p>如果要用<code>exports</code>导出一个命名空间，既可以像<code>fs</code>模块这样，将<code>exports</code>赋值给<code>fs</code>，也可以通过将一个新对象赋值给<code>module.exports</code>实现。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">module.exports = {</div><div class="line">  version: <span class="string">'1.0'</span>,</div><div class="line"></div><div class="line">  doSomething: <span class="keyword">function</span>() {</div><div class="line">    //<span class="keyword">...</span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>还有一个通常用于暴露命名空间的方式，就是将命名空间作为一个根模块，然后在这个根模块中载入很多子模块，再将这些子模块加入到命名空间中。这个方式可以用于模型(model)的设计，我们先定义一个<code>models</code>的模块，这里包括所有子模块，每个子模块就是一个特定的模型，假设这个我们有用户(User)、用户信息(UserProfile)、产品(Product)等几个具体的模型，那么使用<code>require</code>引入<code>models</code>这个模块后，就可以通过<code>models</code>这个模块使用这些模型，代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> models = <span class="built_in">require</span>(<span class="string">'./models'</span>),</div><div class="line">    User = models.User,</div><div class="line">    Product = models.Product;</div></pre></td></tr></table></figure>

<p><code>models</code>模块的<code>index.js</code>可能是下面这样：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">exports</span>.User = <span class="built_in">require</span>(<span class="string">'./user'</span>);</div><div class="line"><span class="built_in">exports</span>.Person = <span class="built_in">require</span>(<span class="string">'./person'</span>);</div></pre></td></tr></table></figure>


<p>实际工程中，如果这些模型的模块文件都在同一个目录下面，我们可以使用一条语句就可以全部加载进行并赋值给<code>module.exports</code>进行暴露。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = <span class="built_in">require</span>(<span class="string">'../lib/require_siblings'</span>)(__filename);</div></pre></td></tr></table></figure>

<h2 id="exports一个工厂方法">exports一个工厂方法</h2>
<p>另外一种模式就是通过<code>exports</code>暴露一个函数，这个函数是一个工厂方法，调用这个工厂方法后会创建一个对象，这个对象会用于完成我们的工作，express就是这么干的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/hello'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span></div><div class="line">  res.send <span class="string">"Hi there! We're using Express v"</span> + express.version;</div><div class="line">});</div></pre></td></tr></table></figure>

<p>你用过express的话，相信你会都很熟悉，也会很陌生上面的代码，说熟悉是因为我们用express的话都会使用这段代码，说模式是因为我们基本上这段代码都是用工具直接生成的，或者是直接copy的，很少会自己写，至少我通常都是这么干的。这个段代码中<code>require(‘express’)</code>会返回一个工厂方法，调用这个方法就会创建express的<code>Application</code>对象。</p>
<p>这个模式实际是暴露了一个函数，在使用<code>exports</code>暴露函数的时候，我们建议对这个函数命名，这样在抛出错误的时候会在错误栈中输出这个函数名称，我们看下下面两个例子：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bomb1.js</span></div><div class="line">module.exports = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span></div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'boom'</span>);</div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">// bomb2.js</span></div><div class="line">module.exports = <span class="function"><span class="keyword">function</span> <span class="title">bomb</span><span class="params">()</span> {</span></div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'boom'</span>);</div><div class="line">};</div></pre></td></tr></table></figure>

<p>我们现在在REPL中分别引入这两个模块，然后执行：</p>
<pre>
$ node
> bomb = require('./bomb1');
[Function]
> bomb()
Error: boom
    at module.exports (/Users/alon/Projects/export_this/bomb1.js:2:9)
    at repl:1:2
    ...
> bomb = require('./bomb2');
[Function: bomb]
> bomb()
Error: boom
    at bomb (/Users/alon/Projects/export_this/bomb2.js:2:9)
    at repl:1:2
    ...
</pre>

<p>我们可以看到第一个调用第一个模块，输出的错误信息是<code>at module.exports (/Users/alon/Projects/export_this/bomb1.js:2:9)</code>，而第二个模块被调用的时候输出<code>at bomb (/Users/alon/Projects/export_this/bomb2.js:2:9)</code>。</p>
<h2 id="exports一个偏函数">exports一个偏函数</h2>
<p>首先解释下什么是偏函数，深入浅出nodejs中对此做了很好的定义，而且也举了一个很经典的例子，我们先看这个例子：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> toString = <span class="built_in">Object</span>.prototype.toString;</div><div class="line"></div><div class="line"><span class="keyword">var</span> isString = <span class="function"><span class="keyword">function</span><span class="params">(obj)</span> {</span></div><div class="line">	<span class="keyword">return</span> toString.call(obj) == ‘[object <span class="built_in">String</span>]’;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">var</span> isFunction = <span class="function"><span class="keyword">function</span><span class="params">(obj)</span>{</span></div><div class="line">	<span class="keyword">return</span> toString.call(obj) == ‘[object <span class="built_in">Function</span>]’;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>上面这段代码中的<code>isString</code>和<code>isFunction</code>这两个函数分别用于判断变量的类型是字符串和函数，对于这种函数，如果要添加其他类型的判断，就需要写更多的函数，但是因为这些函数都有一些共同的特征，所以只需要写一个函数，然后让这个函数返回判断某个类型的函数就可以了，代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isType = <span class="function"><span class="keyword">function</span><span class="params">(type)</span>{</span></div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(obj)</span>{</span></div><div class="line">		<span class="keyword">return</span> toString.call(obj) == ‘[object ‘ + type + ’]’;	</div><div class="line">	};</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">var</span> isString = isType(‘<span class="built_in">String</span>’);</div><div class="line"><span class="keyword">var</span> isFunction = isType(‘<span class="built_in">Function</span>’);</div></pre></td></tr></table></figure>

<p><code>isString</code>和<code>isFunction</code>这种类型的函数很容易创建，这里通过指定参数返回一个新定制函数的形式就叫做偏函数，简单点说偏函数就是返回函数的函数，这种模式在node的模块接口设置中很有价值。</p>
<p>用过express的人都应该知道中间件这个东西，express用的是Connect的中间件。Connect提供了一套中间件用于Web开发，中间件就是一个函数，这个函数会有三个参数——<code>(req,res,next)</code>，我们看下Express是怎么使用Connect的<code>query</code>中间件的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> connect = <span class="keyword">require</span>(<span class="string">'connect'</span>),</div><div class="line">    query = <span class="keyword">require</span>(<span class="string">'connect/lib/middleware/query'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = connect();</div><div class="line">app.<span class="keyword">use</span>(query({maxKeys: <span class="number">100</span>}));</div></pre></td></tr></table></figure>

<p>调用<code>query</code>函数会返回一个参数为<code>(req,res,next)</code>的函数，<code>app.use</code>就可以使用这个中间件，<code>query</code>函数可以根据传入的参数返回不同的中间件，我们看下<code>query</code>的源代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var qs = <span class="built_in">require</span>(<span class="string">'qs'</span>)</div><div class="line">  , parse = <span class="built_in">require</span>(<span class="string">'../utils'</span>).parseUrl;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">(options)</span></span>{</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">(req, res, next)</span></span>{</div><div class="line">    <span class="keyword">if</span> (!req.query) {</div><div class="line">      req.query = ~req.url.indexOf(<span class="string">'?'</span>)</div><div class="line">        ? qs.parse(parse(req).query, options)</div><div class="line">        : {};</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="built_in">next</span>();</div><div class="line">  };</div><div class="line">};</div></pre></td></tr></table></figure>


<p>上面的代码中<code>query</code>函数会接受一个<code>options</code>的参数，并且会返回一个<code>query(req,res,next)</code>的函数，Express使用这个中间件就是实现将url中的查询字符串转换为一个<code>query</code>对象，并且赋值给<code>req</code>，我们通过<code>req.query</code>访问查询字符串的值。</p>
<p>这种暴露接口的模式非常灵活有效，会给我们的工作带来很多便利。</p>
<h2 id="exports构造函数">exports构造函数</h2>
<p>先看下javascript中怎么定义构造函数，以及怎么通过<code>new</code>关键字来创建新对象。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name)</span> {</span></div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">}</div><div class="line"></div><div class="line">Person.prototype.greet = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span></div><div class="line">  <span class="keyword">return</span> <span class="string">"Hi, I'm Jane."</span>;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'Jane'</span>);</div><div class="line">console.log(person.greet()); <span class="comment">// prints: Hi, I'm Jane</span></div></pre></td></tr></table></figure>

<p>第一个<code>Person</code>函数就是<code>Person</code>这个类的构造函数，跟普通的函数定义没什么差别，然后再<code>Person</code>的<code>prototype</code>上定义了一个<code>greet</code>函数，再使用<code>new Person(&#39;&#39;)</code>来创建<code>Person</code>类的对象，这个对象就可以访问<code>greet</code>方法，这就是javascript里面的构造函数的定义和使用，既然构造函数是一个普通函数，那么我们也直接在模块中使用<code>exports</code>暴露这个函数。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name)</span> {</span></div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">}</div><div class="line"></div><div class="line">Person.prototype.greet = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span></div><div class="line">  <span class="keyword">return</span> <span class="string">"Hi, I'm "</span> + <span class="keyword">this</span>.name;</div><div class="line">};</div><div class="line"></div><div class="line">module.exports = Person;</div></pre></td></tr></table></figure>

<p>然后商用上面的模块。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="built_in">require</span>(<span class="string">'./person'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'Jane'</span>);</div></pre></td></tr></table></figure>

<p>通过暴露构造函数，我们可以创建多个对象，这种方式在node的模块设计中非常常见。</p>
<h2 id="exports一个单例">exports一个单例</h2>
<p>有时候我们希望通过<code>require()</code>加载的模块能够在所有调用地方共享这个模块的状态和行为，这就是单例对象的应用模式。</p>
<p>我们来看看<code>Mongoose</code>这个模块，<code>Mongoose</code>是一个对象文档映射库(Object-Document Mapping)，从名字可以看出这个库是跟MongoDB有关的，它可以用于为存储在MongoDB中的数据创建富领域模型(Rich domain model)。</p>
<p>如果我们要使用它，必须先建立数据库连接，一般的web应用都是在程序启动的时候建立数据库连接，假设我们是在Express搭建一个Web应用，我们可以在入口文件<code>app.js</code>中先用<code>Mongoose</code>建立数据库连接，代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>);</div></pre></td></tr></table></figure>

<p>然后我们在<code>cat.js</code>这个文件中要使用mongoDB的数据，代码可以这么写：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var mongoose = <span class="keyword">require</span>(<span class="string">'mongoose'</span>);</div><div class="line"></div><div class="line">var Cat = mongoose.model(<span class="string">'Cat'</span>, { name: String });</div><div class="line"></div><div class="line">var kitty = new Cat({ name: <span class="string">'Zildjian'</span> });</div><div class="line">kitty.save(<span class="keyword">function</span> (err) {</div><div class="line">  <span class="keyword">if</span> (err) // <span class="keyword">...</span></div><div class="line">  console.log(<span class="string">'meow'</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>我们可以看到这里没有再连接数据库了。这说明在<code>app.js</code>中加载mongoose模块，并且使用这个模块连接数据库，然后再在<code>cat.js</code>中<code>require</code>这个模块的时候，这个模块对于mongoDB数据库还是处于连接状态，这就是一种单例对象。这是怎么实现的呢？我们先看下<code>mongoose</code>这个模块是怎么使用<code>exports</code>导出的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Mongoose() {</div><div class="line">  //<span class="keyword">...</span></div><div class="line">}</div><div class="line"></div><div class="line">module.exports = exports = new Mongoose();</div></pre></td></tr></table></figure>

<p><code>exports</code>是一个对象，这个对象是<code>Mongoose</code>的实例。还记得前面我们说过的node的模块缓存机制么？每次<code>require</code>某个模块的时候，node都会将这个<code>require</code>返回的对象缓存起来，缓存的key就是这个模块的绝对路径，所以因为<code>mongoose</code>这个模块<code>exports</code>的是<code>Mongoose</code>的实例，所以每次<code>require</code>这个模块的时候都是返回同一个对象，这样就实现了在所有使用<code>mongoose</code>模块的地方都使用同一个对象，这就是单例模式的经典应用。</p>
<p><code>mongoose</code>这个模块还是提供了命名空间的应用模式</p>
<p>在<code>mongoose</code>的源代码中：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mongoose<span class="preprocessor">.prototype</span><span class="preprocessor">.Mongoose</span> = Mongoose<span class="comment">;</span></div></pre></td></tr></table></figure>

<p>所以我们可以在代码中直接创建<code>mongoose</code>的实例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>),</div><div class="line">    Mongoose = mongoose.Mongoose;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myMongoose = <span class="keyword">new</span> Mongoose();</div><div class="line">myMongoose.connect(<span class="string">'mongodb://localhost/test'</span>);</div></pre></td></tr></table></figure>


<h2 id="exports全局对象">exports全局对象</h2>
<p>在node的模块中，不仅仅只是可以<code>exports</code>一个值，还可以修改全局对象。当你需要扩展全局对象，或者是修改全局对象的行为时，可以使用这种模式。通常而言，我们并不建议扩展或者修改全局对象，但是对于一些特殊情况或者应用场景，使用这种模式还是很有价值的。</p>
<p><code>Should.js</code>就是使用这种模式的典型，它是一个用于单元测试的断言库，我们一般会这么使用它：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'should'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> user = {</div><div class="line">    name: <span class="string">'Jane'</span></div><div class="line">};</div><div class="line"></div><div class="line">user.name.should.equal(<span class="string">'Jane'</span>);</div></pre></td></tr></table></figure>

<p><code>Should.js</code>通过扩展全局对象，为其添加了一个non-enumerable的属性——<code>should</code>，这让编写单元测试非常清晰方便，我们看看它是怎么实现的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var should = <span class="keyword">function</span>(obj) {</div><div class="line">  <span class="keyword">return</span> new Assertion(util.isWrapperType(obj) ? obj.valueOf(): obj);</div><div class="line">};</div><div class="line"></div><div class="line">//<span class="keyword">...</span></div><div class="line"></div><div class="line">exports = module.exports = should;</div><div class="line"></div><div class="line">//<span class="keyword">...</span></div><div class="line"></div><div class="line">Object.defineProperty(Object.prototype, <span class="string">'should'</span>, {</div><div class="line">  set: <span class="keyword">function</span>(){},</div><div class="line">  get: <span class="keyword">function</span>(){</div><div class="line">    <span class="keyword">return</span> should(this);</div><div class="line">  },</div><div class="line">  configurable: true</div><div class="line">});</div></pre></td></tr></table></figure>


<p>这段代码的上面一部分实际上是将<code>should</code>作为一个函数导出，这么做是为了实现通过调用<code>should</code>函数也可以实现单元测试的作用，而后面的部分就是扩展全局对象<code>Object</code>。</p>
<h2 id="实现Monkey_Patch">实现Monkey Patch</h2>
<p>什么是Monkey Patch呢？直译出来是猴子补丁，它的意思是：在运行时动态修改某个类或者模块，多用于给第三方代码打补丁，一般用于修改第三方代码的bug，或者是添加一些没有的功能，至于为什么要用这个名字，我也不知道为什么，有兴趣的可以查看<a href="http://en.wikipedia.org/wiki/Monkey_patch" target="_blank" rel="external">wiki</a>上的定义。我们可以定义一个模块用于给一个已存在的模块打补丁，特别是当这个已存在的模块并未提供接口定制它的行为。这个模式实际上是上一个模式的变体，</p>
<p>我们还是来看下<code>mongoose</code>这个模块，默认情况<code>mongoose</code>这个模块会将<code>model</code>的名称转换为小写和复数的形式作为MongoDB的collection的名称，例如如果我们将模块的名称命名为<code>CreditCardAccountEntry</code>，那么它对应的collection的名称就是<code>creditcardaccountentries</code>，但实际上这个名称非常难以阅读，通常我更喜欢使用<code>credit_card_account_entries</code>，而且我希望这能够作为一种通用模式。</p>
<p>这里我只有给<code>mongoose.model</code>打补丁，代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>).Mongoose;</div><div class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> model = Mongoose.prototype.model;</div><div class="line"><span class="keyword">var</span> modelWithUnderScoreCollectionName = <span class="function"><span class="keyword">function</span><span class="params">(name, schema, collection, skipInit)</span> {</span></div><div class="line">  collection = collection || _(name).chain().underscore().pluralize().value();</div><div class="line">  model.call(<span class="keyword">this</span>, name, schema, collection, skipInit);</div><div class="line">};</div><div class="line">Mongoose.prototype.model = modelWithUnderScoreCollectionName;</div></pre></td></tr></table></figure>

<p>当这个模块第一次被加载的时候，它会加载<code>mongoose</code>，重新定义<code>Mongoose.prototype.model</code>，这里使用了代理模式，最终这个新的<code>model</code>方法也会使用原来的<code>model</code>方式来实现对应的功能。现在所有<code>Mongoose</code>的实例都有这个新的行为。注意，这里没有给<code>exports</code>赋值，所以使用<code>require</code>加载这个模块是时候返回是空对象，这也说<code>exports</code>所表示的默认值。</p>
<p>这里有一点需要注意的，当你要采用这种模式来改变第三方模块的行为的时候，最好是采用这里所用的方式，采用代理模式，尽可能用第三方模块提供的默认行为了完成你的行为，这可以保证在第三方模块更新后还可以继续使用更新后的功能。</p>
<h2 id="结语">结语</h2>
<p>这篇文章中7种模式只是我个人总结的几种<code>exports</code>模块的策略，方便我们设计node的模块，当然肯定还有其他不同的模式，欢迎大家提供更多更好的模式。</p>
]]></content>
    <summary type="html"><![CDATA[<p>当我刚开始接触node的时候，我很困惑于为什么一个模块中即可以用<code>exports</code>，也可以用<code>module.exports</code>暴露接口，另外javascript的灵活性也导致暴露接口的写法多种多样，假设我们要定义一个输出<code>“hello world”</code>的模块，下面有两种写法来定义这个模块：</p>
<figure class="highlight [javascript]"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//写法1</span></div><div class="line">exports.hello = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span></div><div class="line">	console.log(‘world’);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//写法2</span></div><div class="line"><span class="keyword">var</span> f = {</div><div class="line">	hello : <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span></div><div class="line">		console.log(‘world’);</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line">module.exports = f;</div></pre></td></tr></table></figure>

<p>假设我们写的这个模块的文件名为<code>hello.js</code>，执行下面的代码<br>]]></summary>
    
      <category term="language" scheme="http://gywbd.github.com/categories/language/"/>
    
      <category term="node" scheme="http://gywbd.github.com/categories/language/node/"/>
    
  </entry>
  
</feed>
